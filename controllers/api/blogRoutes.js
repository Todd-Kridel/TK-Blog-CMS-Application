

const router = require("express").Router();
const { Blog, Blog_Detail, User } = require("../../models");


// GET all blog records without extra details.
router.get("/", async (req, res) => {
try {
  const blogData = await Blog.findAll();
  if (blogData) {
    res.status(200).json(blogData);
    return;
  }
  else {
    res.status(404).json({"message": "There are not any records that match the selected criteria."});
    return;
  }
} 
catch(err) {
  res.status(500).json(err);
  return;
}
});


// GET all blog records with extra details.
router.get("/detailed", async (req, res) => {
try {
  const blogData = await Blog.findAll({
    include: [{model: Blog_Detail}, {model: User, attributes: ["last_name", "first_name", "email_address", 
    {exclude: "password"}]}]
  });
  if (blogData) {
    const blogs = blogData.map((blog) => blog.get({plain: true}));
    res.status(200).json(blogs);
    return;
  }
  else {
    res.status(400).json({"message": "There are not any records that match the selected criteria."})
    return;
  }
} 
catch (err) {
  res.status(500).json(err)
}
});


// GET a blog record by specific ID.
router.get("/:id", async (req, res) => {
try {
  //const blogData = await Blog.findByPk(req.params.id);
  const blogData = await Blog.findByPk(req.params.id, {
    include: [{model: Blog_Detail}, {model: User, attributes: {exclude: "password"}}]
  });
  if (blogData){
    res.status(200).json(blogData);
    return;
  }
  else {
    res.status(404).json({"message": "There are not any records that match the selected criteria."});
    return;
  }
} 
catch(err) {
  res.status(500).json(err);
}
})


// POST-create a new blog record.
router.post("/", async (req, res) => { 
//console.log("!!!! BLOG POST PROCESS: " + req.body.title); 
// Request Payload:
// {
// title: "...", 
// message_text: "...", 
// author_id: "..."
// }
try {
  //console.log(req.body);
  const blogData = await Blog.create(req.body);
    //// "id": <auto-generated>
    //"title": req.body.title, 
    //"message_text": req.body.message_text, 
    //"author_id": req.body.author_id  // automatic per session variable>
    //// "post_date": <auto-generated>
  if (blogData) {
    //console.table(blogData);
    const blog = blogData.get({plain: true});  // blogData.map((blog) => 
    //console.log("SERVER BLOG DATA FOR RESPONSE TO THE CLIENT");
    //console.table(blog);
    //console.log("BLOG ID (SERVER): " + blog.id); 
    //
    // blog {
    //   dataValues: {
    //     id: <ID>,
    //     title: '<TITLE>',
    //     message_text: '<MESSAGE>',
    //     author_id: <ID>
    //   }  
    //
    //res.render("blog-detail-new", {blog});  // handled instead on the front-end
    //res.redirect("/blog/detail/" + blog.id);  // handled instead on the front-end
    //
    res.status(200).json(blog);
    return;
  }
  else {
    res.status(404).json({"message": "There are not any records that match the selected criteria."});
    return;
  }
} 
catch (err) {
  //console.log(err);
  res.status(500).json(err);
  return;
}
});


// PUT-update a blog record.
router.put("/:id", async (req, res) => {  // check for authentication?
//console.log("!!!! BLOG PUT PROCESS");
//console.log("!!!! update blog record ID: " + req.params.id + "\n" + req.body);
// Request Payload:
// {
// title: "...", 
// message_text: "..."
// }
try {
  const blogData = await Blog.update(req.body, {
    where: {id: req.params.id}
  });
    //// "id": <auto-generated>
    //"title": req.body.title, 
    //"message_text": req.body.message_text, 
    ////"author_id": req.body.author_id  // automatic per session variable>
    //// "post_date": <auto-generated>
  //.then((changed_data, rowsupdated) => {console.log(changed_data, rowsupdated)}); // possible other approach for record-change confirmation
  //.then(function([rowsUpdate, [updatedBlog]]) {res.json(updatedBlog)}); // possible other approach for record-change confirmation
  //console.log("!!!! updated blog record data: " + blogData);
  if (blogData) {
    //const blog = blogData.get({plain: true});  <-- non-valid function for .update PUT response object
    //console.log("SERVER BLOG DATA FOR RESPONSE TO THE CLIENT");
    //console.table(blogData);
    //console.log("DATABASE PROCESS SUCCESSFUL RECORD AMOUNT (SERVER): " + blogData); 
    //
    // blog {
    //   dataValues: {
    //     id: <ID>,
    //     title: '<TITLE>',
    //     message_text: '<MESSAGE>',
    //     author_id: <ID>
    //   }  
    //
    //res.render("blog-detail-new", {blog});  // handled instead on the front-end
    //res.redirect("/blog/detail/" + blog.id);  // handled instead on the front-end
    //
    res.status(200).json(blogData);
    return;
  }
  else {
    res.status(404).json({"message": "There are not any records that match the selected criteria."});
    return;
  }
} 
catch (err) {
  //console.log(err);
  res.status(500).json(err);
  return;
}
});


// DELETE a blog record.
router.delete("/:id", async (req, res) => {  // check for authentication?
try {
  const blogData = await Blog.destroy({
    where: {id: req.params.id}
  });
  if (blogData) {
    res.status(200).json(blogData);
    // res.status(200).json({"message": "The selected blog record was deleted."});
    return;
  }
  else {
    res.status(404).json({"message": "There are not any records that match the selected criteria."});
    return;
  }
} 
catch (err) {
  res.status(500).json(err);
  return;
}
});


module.exports = router;

